. some kind of convenience annotation (hints) for specifying that only one of the segments is needed for a given connection?

. easy movement of segmented data between segments (future)

. packaging: db-specific stuff into shared libraries which can be loaded at runtime depending on configuration.

. should be stackable, i.e. one or each of the segments could be sub-segmented by additional pdb instances...

. schema information required for minimal implementation:
  - master database host/port
  - master database list of tables (or assume that any table not segmented is on the master?)
  - "map" table, with segment_key and segment_id columns indicated
  - current "uber" (write segment for new data)
  - for each segment_id:
    - database host/port
    - list of tables
    - for each table:
      - column which is a segment_key
    OR: foreign key relationship to get closer to a segment_key

. configuration required for minimal implementation:
  - host/port
  - database "name" to extend

. minimal implementation does NOT support multiple segment types, i.e. segmented by both user and date isn't planned.

. minimal implementation does NOT cache anything.

. basic network flow:
-> generic function reads bytes
-> db-specific function aggregates into "commands"
-> db-specific function maps from commands to a handful of possible actions: forward to all databases; forward to one database; forward to subset of databases; SQL voodoo
-> generic functions implement these actions (as much as possible)
-> db-specific functions may optionally make per-db transformations to the commands
-> generic functions do parallelism and read streams of bytes from children
-> db-specific function gets bytes and converts to "replies"
-> generic function builds reply set
-> db-specific function gets reply set and aggregates into single "reply" bytes
-> generic function writes bytes.
